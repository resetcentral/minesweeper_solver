#include <vector>
#include <random>
#include <variant>

namespace minesweeper {
    enum Tile {
        HintMin = 0,
        HintMax = 8,
        Mine = 9,
        Flag = 10,
        Covered = 11
    };
    using Minefield = std::vector<std::vector<Tile>>;

    class MinefieldGenerator {
        std::mt19937_64 rng;
        void place_mines(Minefield& grid, const unsigned int width, const unsigned int height, const unsigned int total_mines);
        void fill_hints(Minefield& grid, const unsigned int width, const unsigned int height);

    public:
        MinefieldGenerator();

        /**
         * Create a MinefieldGenerator initialized with the given seed.
         * 
         * @param seed RNG seed for the generator
         */
        MinefieldGenerator(const unsigned int seed);
        
        /**
         * Generate a valid Minesweeper Minefield with the given width, height,
         * and total number of mines.
         * 
         * @param width width of the Minefield to generate
         * @param height height of the Minefield to generate
         * @param total_mines number of mines in the Minefield to generate
         * 
         * @return generated Minefield
         */
        Minefield generate(const unsigned int width, const unsigned int height, const unsigned int total_mines);
    };

    class Minesweeper {
        Minefield visible;
        Minefield field;
        unsigned int flags_placed {};
        unsigned int covered_tiles;

        bool out_of_bounds(const int x, const int y) const noexcept;
        void bounds_check(const int x, const int y) const;

    public:
        // The state of a Minesweeper game
        enum GameState {
            Win,
            Lose,
            Continue
        };
        // Width and height of the game's Minefield
        const unsigned int width, height;

        // Total number of mines in the game
        const unsigned int total_mines;

        /**
         * Create a Minesweeper game of the given size, with the given number
         * of mines, generated by the given MinefieldGenerator.
         * 
         * @param generator MinefieldGenerator used to generate the Minefield for the game
         * @param width width of the Minefield
         * @param height height of the Minefield
         * @param total_mines number of mines in the Minefield
         */
        Minesweeper(MinefieldGenerator generator, const unsigned int width, const unsigned int height, const unsigned int total_mines);

        /**
         * Create a randomly generated Minesweeper game of the given size, with
         * the given number of mines.
         * 
         * @param width width of the Minefield
         * @param height height of the Minefield
         * @param total_mines number of mines in the Minefield
         */
        Minesweeper(const unsigned int width, const unsigned int height, const unsigned int total_mines);

        /**
         * Get the tile at the given coordinates of the Minefield.
         * 
         * @param x the x-coordinate of the tile to get
         * @param y the y-coordinate of the tile to get
         * 
         * @return Tile at (x, y)
         * 
         * @throws std::out_of_range if the coordinates are outside of the
         *      game field
         */
        Tile get_tile(const int x, const int y) const;

        /**
         * Get the user view of the game field.
         * 
         * @return user view of the game field
         */
        const Minefield& get_field() const noexcept;

        /**
         * Get the number of tiles that are still covered.
         * 
         * @return number of covered tiles
         */
        unsigned int covered_tiles_count() const noexcept;

        /**
         * Get the number of flags that are currently on the game field.
         * 
         * @return number of flags currently placed
         */
        unsigned int flags_placed_count() const noexcept;

        /**
         * Get the number of mines left to flag in the game.
         * 
         * This number can be negative if there are more flags placed than
         * total number of mines in the game.
         * 
         * @return mines left to flag
         */
        int mines_left() const;

        /**
         * Uncover the tile at the given coordinates and check the state
         * of the game.
         * 
         * @param x x-coordinate of the tile to uncover
         * @param y y-coordinate of the tile to uncover
         * 
         * @return the state of the game after uncovering the tile
         * 
         * @throws std::out_of_range if the coordinates are outside of the
         *      game field
         */
        GameState uncover_tile(const int x, const int y);

        /**
         * Toggle the flagged status of the tile at the given coordinates.
         * 
         * Does nothing if the tile is already uncovered.
         * 
         * @param x x-coordinate of the tile to toggle
         * @param y y-coordinate of the tile to toggle
         * 
         * @throws std::out_of_range if the coordinates are outside of the
         *      game field
         */
        void toggle_flag(const int x, const int y);
    };
}